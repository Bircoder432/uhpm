# en.yml - English localization for UHPM

main.debug.using_package_db: "Using package database"
main.debug.db_path_is: "Database path is: {}"
main.info.uhpm_started: "UHPM started"
installer.install.starting: "Starting installation of package: {}"
installer.install.unpacked: "Archive unpacked into {}"
installer.install.reading_meta: "Reading metadata from {}"
installer.install.package_info: "Package: {} version {}"
installer.install.already_installed: "Package {} is already installed with version {}"
installer.install.same_version_skipped: "Same version detected — skipping installation"
installer.install.package_root: "Package root path: {}"
installer.install.removing_existing: "Removing existing package directory: {}"
installer.install.created_dir: "Package directory created: {}"
installer.install.moved_package: "Package moved to {}"
installer.install.creating_symlinks: "Creating symlinks for new package"
installer.install.updating_version: "Updating package version — symlinks not recreated"
installer.install.adding_to_db: "Adding package {} to database with {} files"
installer.install.success: "Package {} installed successfully"

installer.symlinks.loading: "Loading symlist from {}"
installer.symlinks.processing: "Processing symlink: {} -> {}"
installer.symlinks.src_not_found: "Source file not found: {}"
installer.symlinks.created_parent: "Created directory for symlink: {}"
installer.symlinks.removed_existing: "Removed existing symlink: {}"
installer.symlinks.created_link: "Symlink created: {} -> {}"
installer.symlinks.load_failed: "Failed to load symlist: {:?}"
installer.symlinks.total_created: "Created {} symlinks"

installer.unpack.unpacking: "Unpacking {} into {}"
installer.unpack.done: "Unpacked into {}"

uhpmk.init.uhp_ron_created: "Template uhp.ron created at {}"
uhpmk.init.symlist_created: "Template symlist.ron created at {}"
uhpmk.pack.meta_not_found: "uhp.ron not found in {}"
uhpmk.pack.package_packed: "Package packed into {}"

uhpm.remove.pkg_not_found_db: "Package '{}' not found in the database"
uhpm.remove.attempting_remove: "Attempting to remove package: {}-{}"
uhpm.remove.pkg_dir_removed: "Removed package directory: {}"
uhpm.remove.pkg_dir_not_found: "Package directory '{}' not found: {}"
uhpm.remove.file_removed: "Removed: {}"
uhpm.remove.pkg_entry_removed: "Package '{}' entry removed from database"

package.switcher.remove_symlink_failed: "Failed to remove symlink {}: {}"
package.switcher.removed_old_symlink: "Removed old symlink: {}"
package.switcher.skipping_symlink_wrong_target: "Skipping {} — symlink points elsewhere (expected: {}, actual: {})"
package.switcher.read_symlink_failed: "Failed to read symlink target {}: {}"
package.switcher.skipping_not_symlink: "Skipping {} — not a symlink."
package.switcher.metadata_failed: "Failed to get metadata for {}: {}"
package.switcher.symlist_not_found_cleanup_skip: "symlist.ron for current version not found — skipping symlink cleanup"
package.switcher.package_dir_not_found_cleanup_skip: "Current package directory not found ({}), skipping symlink cleanup"
package.switcher.no_current_version_cleanup_skip: "No current version recorded in database — skipping symlink cleanup"
package.switcher.switch_success: "Package '{}' switched to version {} (symlinks updated)."

package.updater.package_not_installed: "Package {} is not installed"
package.updater.installed_version: "Installed version of {}: {}"
package.updater.repo_db_not_found: "Repository database {} not found, skipping"
package.updater.new_version_found: "New version of {} found: {}"
package.updater.update_success: "Package {} updated successfully"
package.updater.already_up_to_date: "Package {} is already up to date"

cli.install.from_file: "Installing package from file: {}"
cli.install.repo_db_not_found: "Repository database {} not found, skipping"
cli.install.package_not_found: "Package {} not found in any repository"
cli.install.downloading: "Downloading and installing package {}..."
cli.install.no_file_or_package: "Neither file nor package name specified for installation"
cli.remove.no_packages: "No packages specified for removal"
cli.remove.removing: "Removing package: {}"
cli.remove.failed: "Failed to remove {}: {:?}"
cli.list.no_packages: "No installed packages"
cli.list.installed_packages: "Installed packages:"
cli.list.package_format: " - {} {} {}"
cli.update.success_or_up_to_date: "Package '{}' updated or already up to date"
cli.update.not_installed: "Package '{}' is not installed"
cli.update.error: "Error updating package '{}': {:?}"
cli.switch.invalid_format: "Invalid format '{}'. Use: name@version"
cli.switch.switching: "Switching package '{}' to version {}..."
cli.switch.success: "Package '{}' successfully switched to {}"
cli.switch.error: "Error switching version: {:?}"
cli.switch.invalid_version: "Invalid version format '{}': {}"

db.new.creating: "Creating PackageDB at {:?}"
db.new.file_created: "New database file created at {:?}"
db.init.connecting: "Connecting to database: {}"
db.init.ensuring_tables: "Ensuring required tables exist"
db.init.success: "Database initialized at {:?}"
db.add_package.adding: "Adding package {} version {}"
db.add_package.added: "Package {} added"
db.add_package_full.adding: "Adding package {} version {} with {} files"
db.add_package_full.adding_dependency: "Adding dependency {} -> {}"
db.add_package_full.adding_file: "Adding installed file: {}"
db.add_package_full.success: "Package {} successfully added"
db.get_installed_files.fetching: "Fetching installed files for {}"
db.get_installed_files.found: "Found {} files for package {}"
db.remove_package.removing: "Removing package {} from database"
db.remove_package.removed: "Package {} removed"
db.get_package_version.fetching: "Fetching current version of {}"
db.get_package_version.result: "Current version of {}: {:?}"
db.list_packages.listing: "Listing all packages"
db.list_packages.found: "Found package: {} {} (current={})"
db.is_installed.checking: "Checking if {} is installed"
db.is_installed.latest_version: "Latest version of {}: {}"
db.is_installed.not_found: "Package {} not found"
db.get_current_package.fetching: "Fetching current package {}"
db.get_current_package.not_found: "Package {} not found"
db.get_current_package.retrieved: "Retrieved package: {:?}"
db.set_current_version.setting: "Setting {} as current version for {}"
db.set_current_version.success: "{} is now current for {}"
db.get_package_by_version.fetching: "Fetching package {} version {}"
db.get_package_by_version.not_found: "Package {} version {} not found"
db.get_package_by_version.retrieved: "Retrieved package: {:?}"

fetcher.download.failed: "Failed to download {}: {}"
fetcher.install.from_url: "Installing package from {}..."

test.installer.tmp_dir: "TMP_DIR = {:?}"
test.installer.home_redirected: "HOME redirected to {:?}"
test.installer.binary_created: "Binary created: {:?}"
test.installer.ron_generated: "Generated uhp.ron:\n{}"
test.installer.symlist_generated: "Generated symlist.ron:\n{}"
test.installer.archive_creation: "Archive will be created at {:?}"
test.installer.archive_created: "Archive created: {:?}"
test.installer.db_creation: "Database will be created at {:?}"
test.installer.installation_start: "Starting package installation"
test.installer.installation_complete: "Package installation completed"
test.installer.package_version: "Package version after installation: {:?}"
test.installer.installed_files: "Installed files: {:?}"
test.installer.file_added_to_archive: "File added to archive: {:?}"

test.remover_test.setup_tmp_dir: "Setting up temporary directory: {}"
test.remover_test.created_pkg_dir: "Created package directory: {}"
test.remover_test.created_binary: "Created binary file: {}"
test.remover_test.created_meta: "Created metadata file: {}"
test.remover_test.created_symlist: "Created symlist file: {}"
test.remover_test.created_target_dir: "Created target directory for symlinks"
test.remover_test.db_initialized: "Database initialized: {}"
test.remover_test.archive_created: "Package archive created: {}"
test.remover_test.package_installed: "Package installed successfully"
test.remover_test.installation_verified: "Package installation verified"
test.remover_test.removal_successful: "Package removal completed successfully"
test.remover_test.db_entry_removed: "Database entry removed"
test.remover_test.symlink_removed: "Symlink removed"
test.remover_test.pkg_dir_removed: "Package directory removed"
test.remover_test.setup_tmp_dir_nonexistent: "Setting up temporary directory for nonexistent test: {}"
test.remover_test.db_initialized_nonexistent: "Database initialized for nonexistent test: {}"
test.remover_test.nonexistent_removal_ok: "Non-existent package removal handled correctly"
test.remover_test.setup_tmp_dir_missing: "Setting up temporary directory for missing dir test: {}"
test.remover_test.db_initialized_missing: "Database initialized for missing dir test: {}"
test.remover_test.package_added_to_db: "Package added to database"
test.remover_test.missing_dir_removal_ok: "Missing directory removal handled correctly"
test.remover_test.db_entry_removed_missing: "Database entry removed for missing directory case"

test.switcher_test.setup_tmp_dir: "Setting up temporary directory for switcher test: {}"
test.switcher_test.created_pkg_dir: "Created package directory: {}"
test.switcher_test.created_binary: "Created binary file: {}"
test.switcher_test.created_meta: "Created metadata file: {}"
test.switcher_test.created_symlist: "Created symlist file: {}"
test.switcher_test.created_target_dir: "Created target directory for symlinks"
test.switcher_test.db_initialized: "Database initialized: {}"
test.switcher_test.archive_created: "Package archive created: {}"
test.switcher_test.package_installed: "Package installed: {}"
test.switcher_test.initial_version_set: "Initial version set to 1.0.0"
test.switcher_test.initial_version_verified: "Initial version verified"
test.switcher_test.switch_successful: "Version switch completed successfully"
test.switcher_test.version_switched_verified: "Version switch verified in database"
test.switcher_test.symlink_updated: "Symlink updated to point to new version"
test.switcher_test.setup_tmp_dir_nonexistent: "Setting up temporary directory for nonexistent test: {}"
test.switcher_test.db_initialized_nonexistent: "Database initialized for nonexistent test: {}"
test.switcher_test.nonexistent_switch_failed: "Switch failed correctly for non-existent package"
test.switcher_test.setup_tmp_dir_missing: "Setting up temporary directory for missing target test: {}"
test.switcher_test.db_initialized_missing: "Database initialized for missing target test: {}"
test.switcher_test.package_installed_missing: "Package installed for missing target test"
test.switcher_test.missing_target_switch_failed: "Switch failed correctly for missing target version"
test.switcher_test.initial_symlink_verified: "Initial symlink verified to point to version 1.0.0"
